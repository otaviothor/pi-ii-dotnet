@host = http://localhost:5135/api

### consulta usuarios /usuarios
GET {{host}}/usuarios HTTP/1.1

### consulta usuario pelos ids /usuarios?ids=id1,id2,id13
GET {{host}}/usuarios?ids=1,4,10 HTTP/1.1

### cadastro usuario /usuarios
POST {{host}}/usuarios HTTP/1.1
content-type: application/json

{
  "Nome": "Otávio Silva",
  "Login": "otavio1@gmail.com",
  "Nivel": "LEI",
  "Senha": "123456"
}

### login /usuarios/signin?login=seulogin@gmail.com&senha=suasenha
GET {{host}}/usuarios/signin?login=otavio@gmail.com&senha=123456 HTTP/1.1

### atualizar usuario /usuarios
PUT {{host}}/usuarios/1 HTTP/1.1 
content-type: application/json

{
  "Nome": "Otávio asd",
  "Login": "asd@gmail.com"
}

### deletar usuario /usuarios/usuarios/4
DELETE {{host}}/usuarios/11 HTTP/1.1

######################################################################

### consulta postagens /postagens
GET {{host}}/postagens?last=false HTTP/1.1

### consulta postagens por id /postagens/idpostagem
GET {{host}}/postagens/2 HTTP/1.1

### consulta postagens por id do escritor /postagens/usuario/idusuario
GET {{host}}/postagens/usuario/1 HTTP/1.1

### cadastro usuario /usuarios
POST {{host}}/postagens HTTP/1.1
content-type: application/json

{
  "Titulo": "Ferrari Formula One 123",
  "Imagem": "https://w0.peakpx.com/wallpaper/213/728/HD-wallpaper-2022-ferrari-f1-75-formula-1-open-top-race-car-turbo-v6.jpg",
  "Conteudo": "<p>Explicando um pouco sobre o código acima, a estrutura básica é a mesma do arquivo <code>index.js</code>, nós exportamos uma função com o nome <code>Pokemon</code> e a única coisa mais diferente é que importamos um hook chamado <code>useRouter()</code> do pacote do Next.js e através dela, conseguimos pegar o parâmetro dinâmico que vem da rota. Também já adiantei e criei uma função que vai pegar os dados do Pokémon que queremos ver através da API e armazenei os dados num <code>useState()</code>. Se clicarmos no primeiro Pokémon da tela inicial, teremos algo parecido com essa rota <code>http://localhost:3000/pokemon/bulbasaur</code>, e veremos o seguinte conteúdo na tela de detalhes:</p>",
  "Ativo": 0,
  "IdUsuarioFk": 6
}

### deleta postagem por id /postagens/idpostagem
DELETE {{host}}/postagens/9 HTTP/1.1

######################################################################

### consulta postagens /postagens
GET {{host}}/postagens?last=false HTTP/1.1

### cadastro comentarios /comentarios
POST {{host}}/comentarios HTTP/1.1
content-type: application/json

{
  "Conteudo": "Explicando um pouco sobre o código acima, a estrutura básica é a mesma do arquivo, nós exportamos uma função com o nome",
  "IdUsuarioFk": 6,
  "idPostagemFk": 15
}